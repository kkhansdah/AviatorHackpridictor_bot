from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! Aviator Predictor Bot ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à‡•§\n/predict ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§")

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 5:
        await update.message.reply_text("‚ùå ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 5 multipliers ‡§≠‡•á‡§ú‡•ã!\n‡§â‡§¶‡§æ‡§π‡§∞‡§£: /predict 1.2 2.4 1.1 5.0 2.1")
        return

    try:
        nums = [float(x) for x in context.args]
        avg = sum(nums) / len(nums)

        if avg < 2:
            msg = "‚ö†Ô∏è Pattern Weak ‡§≤‡§ó ‡§∞‡§π‡§æ ‡§π‡•à\n‚õî Avoid Betting"
        elif avg < 3:
            msg = "üü° Medium Pattern\nüîÅ Wait or Low Bet"
        else:
            msg = "‚úÖ Strong Pattern!\nüü¢ Safe Bet ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã"

        await update.message.reply_text(msg)

    except:
        await update.message.reply_text("‚ùå Invalid input! ‡§∏‡§≠‡•Ä multipliers decimal ‡§Æ‡•á‡§Ç ‡§¶‡•ã‡•§")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("predict", predict))
app.run_polling()
